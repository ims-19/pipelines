def mavenChache = '/root/.m2'
def argsString = '-v ' + mavenChache + ':' + mavenChache + ' -v /usr/bin/nc:/usr/bin/nc -v /usr/bin/lsof:/usr/bin/lsof'
def repository = 'ims19/petclinic'
def gitRepo = 'https://github.com/ims-19/petclinic.git'
def registryCredentials = 'docker-hub'
def dockerImage = 'openjdk:11-jdk'
def updatedLatest = false

pipeline {

    environment {
        DOCKER_HUB = credentials('docker-hub')
    }

    agent any
    
    stages {
        stage('Clone') {
            steps {
                git gitRepo
            }
        }
        stage('Prepare Application') {
            agent {
                docker {
                    image dockerImage
                    args argsString
                    reuseNode true
                }
            }
            stages {
                stage('Build') {
                    steps {
                        sh "ls"
                        sh "./mvnw install -DskipTests"
                    }
                }
                stage('Test') {
                    steps {
                        sh "./mvnw test"
                    }
                }
                stage('Sonarqube') {
                    steps {
                        sh "./mvnw dependency-check:aggregate"
                        withSonarQubeEnv([installationName: 'sonarqube', credentialsId: 'sonarqube']) {
                            sh "./mvnw sonar:sonar -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_AUTH_TOKEN}"
                        }
                    }
                }
                stage("Await Sonarqube Response") {
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            waitForQualityGate webhookSecretId: 'sonarqube-webhook', abortPipeline: true
                        }
                    }
                }
                stage('Package') {
                    steps {
                        sh """
                            ./mvnw package -DskipTests
                            cp /var/jenkins_home/contrast.jar .
                            java  -jar -javaagent:contrast.jar target/*.jar --server.port=4040&
                            while ! nc -z localhost 4040 ; do sleep 3 ; done
                            /var/jenkins_home/smoke_tests.sh
                            kill \$(lsof -t -i:4040)
                        """
                    }
                }
            }
        }
        stage('Build Image') {
            steps {
                script {
                    dockerImage = docker.build(repository + ":$BUILD_NUMBER")
                }
            }
        }
        stage('Push tag') {
            steps {
                script {
                    docker.withRegistry('', registryCredentials) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Analyze Image') {
            steps {
                sh 'echo "docker.io/' + repository + ':' + BUILD_NUMBER + ' `pwd`/Dockerfile" > anchore_images'
                anchore name: 'anchore_images', forceAnalyze: 'true', engineRetries: '600'
            }
        }
        stage('Push latest') {
            steps {
                script {
                    docker.withRegistry('', registryCredentials) {
                        dockerImage.push("latest")
                    }
                    updatedLatest = true
                }
            }
        }
        stage('teardown') {
            steps {
                sh'''
                    for i in `cat anchore_images | awk '{print $1}'`;do docker rmi $i; done
                '''
            }
        }
    }

    post {
        failure {
            script {
                if (!updatedLatest) {
                    token = sh(
                        returnStdout: true,
                        script: """
                            set +x
                            echo \$(curl -s -H \"Content-Type: application/json\" -X POST -d '{\"username\": \"$DOCKER_HUB_USR\", \"password\": \"$DOCKER_HUB_PSW\"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
                        """
                    )
                    
                    sh """
                        set +x
                        curl -i -H \"Authorization: JWT ${token}\" -X DELETE https://hub.docker.com/v2/repositories/ims19/petclinic/tags/${BUILD_NUMBER}/
                    """
                }
            }
        }
    }
}